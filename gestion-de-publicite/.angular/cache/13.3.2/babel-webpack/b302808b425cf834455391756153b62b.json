{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ContentChildren, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/tree';\nimport { TreeModule } from 'primeng/tree';\nimport { ZIndexUtils } from 'primeng/utils';\nconst _c0 = [\"container\"];\nconst _c1 = [\"focusInput\"];\n\nfunction TreeSelect_ng_container_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c2 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    placeholder: a1\n  };\n};\n\nfunction TreeSelect_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeSelect_ng_container_7_ng_container_1_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.valueTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c2, ctx_r2.value, ctx_r2.placeholder));\n  }\n}\n\nfunction TreeSelect_ng_template_8_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.label || \"empty\", \" \");\n  }\n}\n\nfunction TreeSelect_ng_template_8_ng_template_1_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelementStart(1, \"span\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r12 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r12.label);\n  }\n}\n\nfunction TreeSelect_ng_template_8_ng_template_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.placeholder || \"empty\");\n  }\n}\n\nfunction TreeSelect_ng_template_8_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeSelect_ng_template_8_ng_template_1_div_0_Template, 3, 1, \"div\", 14);\n    i0.ɵɵtemplate(1, TreeSelect_ng_template_8_ng_template_1_ng_container_1_Template, 2, 1, \"ng-container\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.emptyValue);\n  }\n}\n\nfunction TreeSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeSelect_ng_template_8_ng_container_0_Template, 2, 1, \"ng-container\", 7);\n    i0.ɵɵtemplate(1, TreeSelect_ng_template_8_ng_template_1_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    const _r8 = i0.ɵɵreference(2);\n\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.display === \"comma\")(\"ngIfElse\", _r8);\n  }\n}\n\nfunction TreeSelect_div_12_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeSelect_div_12_div_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.emptyMessageText, \" \");\n  }\n}\n\nfunction TreeSelect_div_12_div_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeSelect_div_12_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtemplate(1, TreeSelect_div_12_div_5_ng_container_1_Template, 2, 1, \"ng-container\", 7);\n    i0.ɵɵtemplate(2, TreeSelect_div_12_div_5_ng_container_2_Template, 1, 0, \"ng-container\", 24);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r15.emptyTemplate)(\"ngIfElse\", ctx_r15.empty);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r15.emptyTemplate);\n  }\n}\n\nfunction TreeSelect_div_12_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c3 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\n\nconst _c4 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nconst _c5 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    options: a1\n  };\n};\n\nconst _c6 = function (a0) {\n  return {\n    \"max-height\": a0\n  };\n};\n\nfunction TreeSelect_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 18, 19);\n    i0.ɵɵlistener(\"click\", function TreeSelect_div_12_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.onOverlayClick($event);\n    })(\"@overlayAnimation.start\", function TreeSelect_div_12_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.onOverlayAnimationStart($event);\n    })(\"@overlayAnimation.done\", function TreeSelect_div_12_Template_div_animation_overlayAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.onOverlayAnimationDone($event);\n    });\n    i0.ɵɵtemplate(2, TreeSelect_div_12_ng_container_2_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵelementStart(4, \"p-tree\", 21);\n    i0.ɵɵlistener(\"selectionChange\", function TreeSelect_div_12_Template_p_tree_selectionChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.onSelectionChange($event);\n    })(\"onNodeExpand\", function TreeSelect_div_12_Template_p_tree_onNodeExpand_4_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.nodeExpand($event);\n    })(\"onNodeCollapse\", function TreeSelect_div_12_Template_p_tree_onNodeCollapse_4_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.nodeCollapse($event);\n    })(\"onNodeSelect\", function TreeSelect_div_12_Template_p_tree_onNodeSelect_4_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.onSelect($event);\n    })(\"onNodeUnselect\", function TreeSelect_div_12_Template_p_tree_onNodeUnselect_4_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.onUnselect($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TreeSelect_div_12_div_5_Template, 3, 3, \"div\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, TreeSelect_div_12_ng_container_6_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@overlayAnimation\", i0.ɵɵpureFunction1(16, _c4, i0.ɵɵpureFunction2(13, _c3, ctx_r5.showTransitionOptions, ctx_r5.hideTransitionOptions)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(18, _c5, ctx_r5.value, ctx_r5.options));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(21, _c6, ctx_r5.scrollHeight));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r5.options)(\"propagateSelectionDown\", ctx_r5.propagateSelectionDown)(\"propagateSelectionUp\", ctx_r5.propagateSelectionUp)(\"selectionMode\", ctx_r5.selectionMode)(\"selection\", ctx_r5.value)(\"metaKeySelection\", ctx_r5.metaKeySelection);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.emptyOptions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(23, _c5, ctx_r5.value, ctx_r5.options));\n  }\n}\n\nconst TREESELECT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TreeSelect),\n  multi: true\n};\n\nclass TreeSelect {\n  constructor(config, cd, el, overlayService) {\n    this.config = config;\n    this.cd = cd;\n    this.el = el;\n    this.overlayService = overlayService;\n    this.type = \"button\";\n    this.scrollHeight = \"400px\";\n    this.metaKeySelection = true;\n    this.display = \"comma\";\n    this.selectionMode = \"single\";\n    this.propagateSelectionDown = true;\n    this.propagateSelectionUp = true;\n    this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n    this.hideTransitionOptions = '.1s linear';\n    this.onNodeExpand = new EventEmitter();\n    this.onNodeCollapse = new EventEmitter();\n    this.onShow = new EventEmitter();\n    this.onHide = new EventEmitter();\n    this.onNodeUnselect = new EventEmitter();\n    this.onNodeSelect = new EventEmitter();\n    this.expandedNodes = [];\n\n    this.onModelChange = () => {};\n\n    this.onModelTouched = () => {};\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this._options = options;\n    this.updateTreeState();\n  }\n\n  ngOnInit() {\n    this.updateTreeState();\n  }\n\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'value':\n          this.valueTemplate = item.template;\n          break;\n\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n\n        case 'empty':\n          this.emptyTemplate = item.template;\n          break;\n\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n\n        default:\n          this.valueTemplate = item.template;\n          break;\n      }\n    });\n  }\n\n  onOverlayAnimationStart(event) {\n    switch (event.toState) {\n      case 'visible':\n        this.overlayEl = event.element;\n        this.onOverlayEnter();\n        break;\n    }\n  }\n\n  onOverlayAnimationDone(event) {\n    switch (event.toState) {\n      case 'void':\n        this.onOverlayLeave();\n        break;\n    }\n  }\n\n  onSelectionChange(event) {\n    this.value = event;\n    this.onModelChange(this.value);\n    this.cd.markForCheck();\n  }\n\n  onClick(event) {\n    if (!this.disabled && (!this.overlayEl || !this.overlayEl.contains(event.target)) && !DomHandler.hasClass(event.target, 'p-treeselect-close')) {\n      if (this.overlayVisible) {\n        this.hide();\n      } else this.show();\n\n      this.focusInput.nativeElement.focus();\n    }\n  }\n\n  onKeyDown(event) {\n    switch (event.which) {\n      //down\n      case 40:\n        if (!this.overlayVisible && event.altKey) {\n          this.show();\n          event.preventDefault();\n        } else if (this.overlayVisible && this.overlayEl) {\n          let focusableElements = DomHandler.getFocusableElements(this.overlayEl);\n\n          if (focusableElements && focusableElements.length > 0) {\n            focusableElements[0].focus();\n          }\n\n          event.preventDefault();\n        }\n\n        break;\n      //space\n\n      case 32:\n        if (!this.overlayVisible) {\n          this.show();\n          event.preventDefault();\n        }\n\n        break;\n      //enter and escape\n\n      case 13:\n      case 27:\n        if (this.overlayVisible) {\n          this.hide();\n          event.preventDefault();\n        }\n\n        break;\n      //tab\n\n      case 9:\n        this.hide();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  show() {\n    this.overlayVisible = true;\n  }\n\n  hide() {\n    this.overlayVisible = false;\n    this.cd.markForCheck();\n  }\n\n  onOverlayClick(event) {\n    this.overlayService.add({\n      originalEvent: event,\n      target: this.el.nativeElement\n    });\n  }\n\n  updateTreeState() {\n    if (this.value) {\n      let selectedNodes = this.selectionMode === \"single\" ? [this.value] : [...this.value];\n      this.resetExpandedNodes();\n\n      if (selectedNodes && this.options) {\n        this.updateTreeBranchState(null, null, selectedNodes);\n      }\n    }\n  }\n\n  updateTreeBranchState(node, path, selectedNodes) {\n    if (node) {\n      if (this.isSelected(node)) {\n        this.expandPath(path);\n        selectedNodes.splice(selectedNodes.indexOf(node), 1);\n      }\n\n      if (selectedNodes.length > 0 && node.children) {\n        for (let childNode of node.children) {\n          path.push(node);\n          this.updateTreeBranchState(childNode, path, selectedNodes);\n        }\n      }\n    } else {\n      for (let childNode of this.options) {\n        this.updateTreeBranchState(childNode, [], selectedNodes);\n      }\n    }\n  }\n\n  expandPath(expandedNodes) {\n    for (let node of expandedNodes) {\n      node.expanded = true;\n    }\n\n    this.expandedNodes = [...expandedNodes];\n  }\n\n  nodeExpand(event) {\n    this.onNodeExpand.emit(event);\n    this.expandedNodes.push(event.node);\n  }\n\n  nodeCollapse(event) {\n    this.onNodeCollapse.emit(event);\n    this.expandedNodes.splice(this.expandedNodes.indexOf(event.node), 1);\n  }\n\n  resetExpandedNodes() {\n    for (let node of this.expandedNodes) {\n      node.expanded = false;\n    }\n\n    this.expandedNodes = [];\n  }\n\n  findSelectedNodes(node, keys, selectedNodes) {\n    if (node) {\n      if (this.isSelected(node)) {\n        selectedNodes.push(node);\n        delete keys[node.key];\n      }\n\n      if (Object.keys(keys).length && node.children) {\n        for (let childNode of node.children) {\n          this.findSelectedNodes(childNode, keys, selectedNodes);\n        }\n      }\n    } else {\n      for (let childNode of this.options) {\n        this.findSelectedNodes(childNode, keys, selectedNodes);\n      }\n    }\n  }\n\n  isSelected(node) {\n    return this.findIndexInSelection(node) != -1;\n  }\n\n  findIndexInSelection(node) {\n    let index = -1;\n\n    if (this.value) {\n      if (this.selectionMode === \"single\") {\n        let areNodesEqual = this.value.key && this.value.key === node.key || this.value == node;\n        index = areNodesEqual ? 0 : -1;\n      } else {\n        for (let i = 0; i < this.value.length; i++) {\n          let selectedNode = this.value[i];\n          let areNodesEqual = selectedNode.key && selectedNode.key === node.key || selectedNode == node;\n\n          if (areNodesEqual) {\n            index = i;\n            break;\n          }\n        }\n      }\n    }\n\n    return index;\n  }\n\n  onSelect(node) {\n    this.onNodeSelect.emit(node);\n\n    if (this.selectionMode === 'single') {\n      this.hide();\n    }\n  }\n\n  onUnselect(node) {\n    this.onNodeUnselect.emit(node);\n  }\n\n  onOverlayEnter() {\n    ZIndexUtils.set('overlay', this.overlayEl, this.config.zIndex.overlay);\n    this.appendContainer();\n    this.alignOverlay();\n    this.bindOutsideClickListener();\n    this.bindScrollListener();\n    this.bindResizeListener();\n    this.onShow.emit();\n  }\n\n  onOverlayLeave() {\n    this.unbindOutsideClickListener();\n    this.unbindScrollListener();\n    this.unbindResizeListener();\n    ZIndexUtils.clear(this.overlayEl);\n    this.overlayEl = null;\n    this.onHide.emit();\n  }\n\n  onFocus() {\n    this.focused = true;\n  }\n\n  onBlur() {\n    this.focused = false;\n  }\n\n  writeValue(value) {\n    this.value = value;\n    this.updateTreeState();\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState(val) {\n    this.disabled = val;\n    this.cd.markForCheck();\n  }\n\n  appendContainer() {\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.overlayEl);else document.getElementById(this.appendTo).appendChild(this.overlayEl);\n    }\n  }\n\n  restoreAppend() {\n    if (this.overlayEl && this.appendTo) {\n      if (this.appendTo === 'body') document.body.removeChild(this.overlayEl);else document.getElementById(this.appendTo).removeChild(this.overlayEl);\n    }\n  }\n\n  alignOverlay() {\n    if (this.appendTo) {\n      DomHandler.absolutePosition(this.overlayEl, this.containerEl.nativeElement);\n      this.overlayEl.style.minWidth = DomHandler.getOuterWidth(this.containerEl.nativeElement) + 'px';\n    } else {\n      DomHandler.relativePosition(this.overlayEl, this.containerEl.nativeElement);\n    }\n  }\n\n  bindOutsideClickListener() {\n    if (!this.outsideClickListener) {\n      this.outsideClickListener = event => {\n        if (this.overlayVisible && this.overlayEl && !this.containerEl.nativeElement.contains(event.target) && !this.overlayEl.contains(event.target)) {\n          this.hide();\n        }\n      };\n\n      document.addEventListener('click', this.outsideClickListener);\n    }\n  }\n\n  unbindOutsideClickListener() {\n    if (this.outsideClickListener) {\n      document.removeEventListener('click', this.outsideClickListener);\n      this.outsideClickListener = null;\n    }\n  }\n\n  bindScrollListener() {\n    if (!this.scrollHandler) {\n      this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerEl.nativeElement, () => {\n        if (this.overlayVisible) {\n          this.hide();\n        }\n      });\n    }\n\n    this.scrollHandler.bindScrollListener();\n  }\n\n  unbindScrollListener() {\n    if (this.scrollHandler) {\n      this.scrollHandler.unbindScrollListener();\n    }\n  }\n\n  bindResizeListener() {\n    if (!this.resizeListener) {\n      this.resizeListener = () => {\n        if (this.overlayVisible) {\n          this.hide();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeListener);\n    }\n  }\n\n  unbindResizeListener() {\n    if (this.resizeListener) {\n      window.removeEventListener('resize', this.resizeListener);\n      this.resizeListener = null;\n    }\n  }\n\n  ngOnDestroy() {\n    this.restoreAppend();\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n\n    if (this.overlayEl) {\n      ZIndexUtils.clear(this.overlayEl);\n      this.overlayEl = null;\n    }\n  }\n\n  containerClass() {\n    return {\n      'p-treeselect p-component p-inputwrapper': true,\n      'p-treeselect-chip': this.display === 'chip',\n      'p-disabled': this.disabled,\n      'p-focus': this.focused\n    };\n  }\n\n  labelClass() {\n    return {\n      'p-treeselect-label': true,\n      'p-placeholder': this.label === this.placeholder,\n      'p-treeselect-label-empty': !this.placeholder && this.emptyValue\n    };\n  }\n\n  get emptyMessageText() {\n    return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n  }\n\n  get emptyValue() {\n    return !this.value || Object.keys(this.value).length === 0;\n  }\n\n  get emptyOptions() {\n    return !this.options || this.options.length === 0;\n  }\n\n  get label() {\n    let value = this.value || [];\n    return value.length ? value.map(node => node.label).join(', ') : this.selectionMode === \"single\" && this.value ? value.label : this.placeholder;\n  }\n\n}\n\nTreeSelect.ɵfac = function TreeSelect_Factory(t) {\n  return new (t || TreeSelect)(i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.OverlayService));\n};\n\nTreeSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeSelect,\n  selectors: [[\"p-treeSelect\"]],\n  contentQueries: function TreeSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function TreeSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusInput = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\", \"p-inputwrapper\"],\n  hostVars: 4,\n  hostBindings: function TreeSelect_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-inputwrapper-filled\", !ctx.emptyValue)(\"p-inputwrapper-focus\", ctx.focused || ctx.overlayVisible);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    inputId: \"inputId\",\n    scrollHeight: \"scrollHeight\",\n    disabled: \"disabled\",\n    metaKeySelection: \"metaKeySelection\",\n    display: \"display\",\n    selectionMode: \"selectionMode\",\n    tabindex: \"tabindex\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    placeholder: \"placeholder\",\n    panelClass: \"panelClass\",\n    emptyMessage: \"emptyMessage\",\n    appendTo: \"appendTo\",\n    propagateSelectionDown: \"propagateSelectionDown\",\n    propagateSelectionUp: \"propagateSelectionUp\",\n    options: \"options\",\n    showTransitionOptions: \"showTransitionOptions\",\n    hideTransitionOptions: \"hideTransitionOptions\"\n  },\n  outputs: {\n    onNodeExpand: \"onNodeExpand\",\n    onNodeCollapse: \"onNodeCollapse\",\n    onShow: \"onShow\",\n    onHide: \"onHide\",\n    onNodeUnselect: \"onNodeUnselect\",\n    onNodeSelect: \"onNodeSelect\"\n  },\n  features: [i0.ɵɵProvidersFeature([TREESELECT_VALUE_ACCESSOR])],\n  decls: 13,\n  vars: 10,\n  consts: [[3, \"ngClass\", \"click\"], [\"container\", \"\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"role\", \"listbox\", \"readonly\", \"\", \"aria-haspopup\", \"true\", 3, \"disabled\", \"focus\", \"blur\", \"keydown\"], [\"focusInput\", \"\"], [1, \"p-treeselect-label-container\"], [3, \"ngClass\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultValueTemplate\", \"\"], [1, \"p-treeselect-trigger\"], [1, \"p-treeselect-trigger-icon\", \"pi\", \"pi-chevron-down\"], [\"class\", \"p-treeselect-panel p-component\", 3, \"click\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"chipsValueTemplate\", \"\"], [\"class\", \"p-treeselect-token\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"p-treeselect-token\"], [1, \"p-treeselect-token-label\"], [1, \"p-treeselect-panel\", \"p-component\", 3, \"click\"], [\"overlayRef\", \"\"], [1, \"p-treeselect-items-wrapper\", 3, \"ngStyle\"], [3, \"value\", \"propagateSelectionDown\", \"propagateSelectionUp\", \"selectionMode\", \"selection\", \"metaKeySelection\", \"selectionChange\", \"onNodeExpand\", \"onNodeCollapse\", \"onNodeSelect\", \"onNodeUnselect\"], [\"class\", \"p-treeselect-empty-message\", 4, \"ngIf\"], [1, \"p-treeselect-empty-message\"], [4, \"ngTemplateOutlet\"]],\n  template: function TreeSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"click\", function TreeSelect_Template_div_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"input\", 3, 4);\n      i0.ɵɵlistener(\"focus\", function TreeSelect_Template_input_focus_3_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TreeSelect_Template_input_blur_3_listener() {\n        return ctx.onBlur();\n      })(\"keydown\", function TreeSelect_Template_input_keydown_3_listener($event) {\n        return ctx.onKeyDown($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 5);\n      i0.ɵɵelementStart(6, \"div\", 6);\n      i0.ɵɵtemplate(7, TreeSelect_ng_container_7_Template, 2, 5, \"ng-container\", 7);\n      i0.ɵɵtemplate(8, TreeSelect_ng_template_8_Template, 3, 2, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 9);\n      i0.ɵɵelement(11, \"span\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, TreeSelect_div_12_Template, 7, 26, \"div\", 11);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(9);\n\n      i0.ɵɵproperty(\"ngClass\", ctx.containerClass());\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"id\", ctx.inputId)(\"tabindex\", ctx.tabindex)(\"aria-expanded\", ctx.overlayVisible)(\"aria-labelledby\", ctx.ariaLabelledBy);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngClass\", ctx.labelClass());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.valueTemplate)(\"ngIfElse\", _r3);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n    }\n  },\n  directives: [i2.Tree, i3.NgClass, i3.NgIf, i3.NgTemplateOutlet, i3.NgForOf, i3.NgStyle],\n  styles: [\".p-treeselect{display:inline-flex;cursor:pointer;position:relative;-webkit-user-select:none;user-select:none}.p-treeselect-trigger{display:flex;align-items:center;justify-content:center;flex-shrink:0}.p-treeselect-label-container{overflow:hidden;flex:1 1 auto;cursor:pointer}.p-treeselect-label{display:block;white-space:nowrap;cursor:pointer;overflow:hidden;text-overflow:ellipsis}.p-treeselect-label-empty{overflow:hidden;visibility:hidden}.p-treeselect-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto}.p-treeselect .p-treeselect-panel{min-width:100%}.p-treeselect-panel{position:absolute;top:0;left:0}.p-treeselect-items-wrapper{overflow:auto}.p-fluid .p-treeselect{display:flex}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('overlayAnimation', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scaleY(0.8)'\n    }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelect, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeSelect',\n      template: `\n    <div #container [ngClass]=\"containerClass()\" (click)=\"onClick($event)\">\n        <div class=\"p-hidden-accessible\">\n            <input #focusInput type=\"text\" role=\"listbox\" [attr.id]=\"inputId\" readonly [disabled]=\"disabled\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" (keydown)=\"onKeyDown($event)\" [attr.tabindex]=\"tabindex\"\n            aria-haspopup=\"true\" [attr.aria-expanded]=\"overlayVisible\" [attr.aria-labelledby]=\"ariaLabelledBy\"/>\n        </div>\n        <div class=\"p-treeselect-label-container\">\n            <div [ngClass]=\"labelClass()\">\n                <ng-container *ngIf=\"valueTemplate;else defaultValueTemplate\">\n                        <ng-container *ngTemplateOutlet=\"valueTemplate; context: {$implicit: value, placeholder: placeholder}\"></ng-container>\n                </ng-container>\n                <ng-template #defaultValueTemplate>\n                    <ng-container *ngIf=\"display === 'comma';else chipsValueTemplate\">\n                        {{label || 'empty'}}\n                    </ng-container>\n                    <ng-template #chipsValueTemplate>\n                        <div *ngFor=\"let node of value\" class=\"p-treeselect-token\">\n                            <span class=\"p-treeselect-token-label\">{{node.label}}</span>\n                        </div>\n                        <ng-container *ngIf=\"emptyValue\">{{placeholder || 'empty'}}</ng-container>\n                    </ng-template>\n                </ng-template>\n            </div>\n        </div>\n        <div class=\"p-treeselect-trigger\">\n            <span class=\"p-treeselect-trigger-icon pi pi-chevron-down\"></span>\n        </div>\n\n        <div #overlayRef class=\"p-treeselect-panel p-component\" *ngIf=\"overlayVisible\" (click)=\"onOverlayClick($event)\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationDone($event)\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: value, options: options}\"></ng-container>\n            <div class=\"p-treeselect-items-wrapper\" [ngStyle]=\"{'max-height': scrollHeight}\">\n                <p-tree [value]=\"options\" [propagateSelectionDown]=\"propagateSelectionDown\" [propagateSelectionUp]=\"propagateSelectionUp\" [selectionMode]=\"selectionMode\" (selectionChange)=\"onSelectionChange($event)\" [selection]=\"value\"\n                    [metaKeySelection]=\"metaKeySelection\" (onNodeExpand)=\"nodeExpand($event)\" (onNodeCollapse)=\"nodeCollapse($event)\"\n                    (onNodeSelect)=\"onSelect($event)\" (onNodeUnselect)=\"onUnselect($event)\"></p-tree>\n                <div *ngIf=\"emptyOptions\" class=\"p-treeselect-empty-message\">\n                    <ng-container *ngIf=\"!emptyTemplate; else empty\">\n                        {{emptyMessageText}}\n                    </ng-container>\n                    <ng-container *ngTemplateOutlet=\"emptyTemplate;\"></ng-container>\n                </div>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: value, options: options}\"></ng-container>\n        </div>\n    </div>\n    `,\n      animations: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])],\n      host: {\n        'class': 'p-element p-inputwrapper',\n        '[class.p-inputwrapper-filled]': '!emptyValue',\n        '[class.p-inputwrapper-focus]': 'focused || overlayVisible'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [TREESELECT_VALUE_ACCESSOR],\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".p-treeselect{display:inline-flex;cursor:pointer;position:relative;-webkit-user-select:none;user-select:none}.p-treeselect-trigger{display:flex;align-items:center;justify-content:center;flex-shrink:0}.p-treeselect-label-container{overflow:hidden;flex:1 1 auto;cursor:pointer}.p-treeselect-label{display:block;white-space:nowrap;cursor:pointer;overflow:hidden;text-overflow:ellipsis}.p-treeselect-label-empty{overflow:hidden;visibility:hidden}.p-treeselect-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto}.p-treeselect .p-treeselect-panel{min-width:100%}.p-treeselect-panel{position:absolute;top:0;left:0}.p-treeselect-items-wrapper{overflow:auto}.p-fluid .p-treeselect{display:flex}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i1.PrimeNGConfig\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.OverlayService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    display: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    emptyMessage: [{\n      type: Input\n    }],\n    appendTo: [{\n      type: Input\n    }],\n    propagateSelectionDown: [{\n      type: Input\n    }],\n    propagateSelectionUp: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    showTransitionOptions: [{\n      type: Input\n    }],\n    hideTransitionOptions: [{\n      type: Input\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    containerEl: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    focusInput: [{\n      type: ViewChild,\n      args: ['focusInput']\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onShow: [{\n      type: Output\n    }],\n    onHide: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeSelectModule {}\n\nTreeSelectModule.ɵfac = function TreeSelectModule_Factory(t) {\n  return new (t || TreeSelectModule)();\n};\n\nTreeSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeSelectModule\n});\nTreeSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RippleModule, SharedModule, TreeModule], SharedModule, TreeModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RippleModule, SharedModule, TreeModule],\n      exports: [TreeSelect, SharedModule, TreeModule],\n      declarations: [TreeSelect]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TREESELECT_VALUE_ACCESSOR, TreeSelect, TreeSelectModule };","map":{"version":3,"sources":["C:/Users/USER/gestion-de-publicite/node_modules/primeng/fesm2015/primeng-treeselect.mjs"],"names":["i0","forwardRef","EventEmitter","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","ContentChildren","ViewChild","Output","NgModule","i3","CommonModule","RippleModule","i1","TranslationKeys","PrimeTemplate","SharedModule","trigger","transition","style","animate","NG_VALUE_ACCESSOR","DomHandler","ConnectedOverlayScrollHandler","i2","TreeModule","ZIndexUtils","TREESELECT_VALUE_ACCESSOR","provide","useExisting","TreeSelect","multi","constructor","config","cd","el","overlayService","type","scrollHeight","metaKeySelection","display","selectionMode","propagateSelectionDown","propagateSelectionUp","showTransitionOptions","hideTransitionOptions","onNodeExpand","onNodeCollapse","onShow","onHide","onNodeUnselect","onNodeSelect","expandedNodes","onModelChange","onModelTouched","options","_options","updateTreeState","ngOnInit","ngAfterContentInit","templates","forEach","item","getType","valueTemplate","template","headerTemplate","emptyTemplate","footerTemplate","onOverlayAnimationStart","event","toState","overlayEl","element","onOverlayEnter","onOverlayAnimationDone","onOverlayLeave","onSelectionChange","value","markForCheck","onClick","disabled","contains","target","hasClass","overlayVisible","hide","show","focusInput","nativeElement","focus","onKeyDown","which","altKey","preventDefault","focusableElements","getFocusableElements","length","onOverlayClick","add","originalEvent","selectedNodes","resetExpandedNodes","updateTreeBranchState","node","path","isSelected","expandPath","splice","indexOf","children","childNode","push","expanded","nodeExpand","emit","nodeCollapse","findSelectedNodes","keys","key","Object","findIndexInSelection","index","areNodesEqual","i","selectedNode","onSelect","onUnselect","set","zIndex","overlay","appendContainer","alignOverlay","bindOutsideClickListener","bindScrollListener","bindResizeListener","unbindOutsideClickListener","unbindScrollListener","unbindResizeListener","clear","onFocus","focused","onBlur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","val","appendTo","document","body","appendChild","getElementById","restoreAppend","removeChild","absolutePosition","containerEl","minWidth","getOuterWidth","relativePosition","outsideClickListener","addEventListener","removeEventListener","scrollHandler","resizeListener","window","ngOnDestroy","destroy","containerClass","labelClass","label","placeholder","emptyValue","emptyMessageText","emptyMessage","getTranslation","EMPTY_MESSAGE","emptyOptions","map","join","ɵfac","PrimeNGConfig","ChangeDetectorRef","ElementRef","OverlayService","ɵcmp","Tree","NgClass","NgIf","NgTemplateOutlet","NgForOf","NgStyle","opacity","transform","args","selector","animations","host","changeDetection","OnPush","providers","encapsulation","None","styles","inputId","tabindex","ariaLabelledBy","panelClass","TreeSelectModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ContentChildren, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/tree';\nimport { TreeModule } from 'primeng/tree';\nimport { ZIndexUtils } from 'primeng/utils';\n\nconst TREESELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TreeSelect),\n    multi: true\n};\nclass TreeSelect {\n    constructor(config, cd, el, overlayService) {\n        this.config = config;\n        this.cd = cd;\n        this.el = el;\n        this.overlayService = overlayService;\n        this.type = \"button\";\n        this.scrollHeight = \"400px\";\n        this.metaKeySelection = true;\n        this.display = \"comma\";\n        this.selectionMode = \"single\";\n        this.propagateSelectionDown = true;\n        this.propagateSelectionUp = true;\n        this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n        this.hideTransitionOptions = '.1s linear';\n        this.onNodeExpand = new EventEmitter();\n        this.onNodeCollapse = new EventEmitter();\n        this.onShow = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.onNodeUnselect = new EventEmitter();\n        this.onNodeSelect = new EventEmitter();\n        this.expandedNodes = [];\n        this.onModelChange = () => { };\n        this.onModelTouched = () => { };\n    }\n    get options() {\n        return this._options;\n    }\n    ;\n    set options(options) {\n        this._options = options;\n        this.updateTreeState();\n    }\n    ngOnInit() {\n        this.updateTreeState();\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'value':\n                    this.valueTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'empty':\n                    this.emptyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                default:\n                    this.valueTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    onOverlayAnimationStart(event) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlayEl = event.element;\n                this.onOverlayEnter();\n                break;\n        }\n    }\n    onOverlayAnimationDone(event) {\n        switch (event.toState) {\n            case 'void':\n                this.onOverlayLeave();\n                break;\n        }\n    }\n    onSelectionChange(event) {\n        this.value = event;\n        this.onModelChange(this.value);\n        this.cd.markForCheck();\n    }\n    onClick(event) {\n        if (!this.disabled && (!this.overlayEl || !this.overlayEl.contains(event.target)) && !DomHandler.hasClass(event.target, 'p-treeselect-close')) {\n            if (this.overlayVisible) {\n                this.hide();\n            }\n            else\n                this.show();\n            this.focusInput.nativeElement.focus();\n        }\n    }\n    onKeyDown(event) {\n        switch (event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                    event.preventDefault();\n                }\n                else if (this.overlayVisible && this.overlayEl) {\n                    let focusableElements = DomHandler.getFocusableElements(this.overlayEl);\n                    if (focusableElements && focusableElements.length > 0) {\n                        focusableElements[0].focus();\n                    }\n                    event.preventDefault();\n                }\n                break;\n            //space\n            case 32:\n                if (!this.overlayVisible) {\n                    this.show();\n                    event.preventDefault();\n                }\n                break;\n            //enter and escape\n            case 13:\n            case 27:\n                if (this.overlayVisible) {\n                    this.hide();\n                    event.preventDefault();\n                }\n                break;\n            //tab\n            case 9:\n                this.hide();\n                break;\n            default:\n                break;\n        }\n    }\n    show() {\n        this.overlayVisible = true;\n    }\n    hide() {\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n    }\n    onOverlayClick(event) {\n        this.overlayService.add({\n            originalEvent: event,\n            target: this.el.nativeElement\n        });\n    }\n    updateTreeState() {\n        if (this.value) {\n            let selectedNodes = this.selectionMode === \"single\" ? [this.value] : [...this.value];\n            this.resetExpandedNodes();\n            if (selectedNodes && this.options) {\n                this.updateTreeBranchState(null, null, selectedNodes);\n            }\n        }\n    }\n    updateTreeBranchState(node, path, selectedNodes) {\n        if (node) {\n            if (this.isSelected(node)) {\n                this.expandPath(path);\n                selectedNodes.splice(selectedNodes.indexOf(node), 1);\n            }\n            if (selectedNodes.length > 0 && node.children) {\n                for (let childNode of node.children) {\n                    path.push(node);\n                    this.updateTreeBranchState(childNode, path, selectedNodes);\n                }\n            }\n        }\n        else {\n            for (let childNode of this.options) {\n                this.updateTreeBranchState(childNode, [], selectedNodes);\n            }\n        }\n    }\n    expandPath(expandedNodes) {\n        for (let node of expandedNodes) {\n            node.expanded = true;\n        }\n        this.expandedNodes = [...expandedNodes];\n    }\n    nodeExpand(event) {\n        this.onNodeExpand.emit(event);\n        this.expandedNodes.push(event.node);\n    }\n    nodeCollapse(event) {\n        this.onNodeCollapse.emit(event);\n        this.expandedNodes.splice(this.expandedNodes.indexOf(event.node), 1);\n    }\n    resetExpandedNodes() {\n        for (let node of this.expandedNodes) {\n            node.expanded = false;\n        }\n        this.expandedNodes = [];\n    }\n    findSelectedNodes(node, keys, selectedNodes) {\n        if (node) {\n            if (this.isSelected(node)) {\n                selectedNodes.push(node);\n                delete keys[node.key];\n            }\n            if (Object.keys(keys).length && node.children) {\n                for (let childNode of node.children) {\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\n                }\n            }\n        }\n        else {\n            for (let childNode of this.options) {\n                this.findSelectedNodes(childNode, keys, selectedNodes);\n            }\n        }\n    }\n    isSelected(node) {\n        return this.findIndexInSelection(node) != -1;\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.value) {\n            if (this.selectionMode === \"single\") {\n                let areNodesEqual = (this.value.key && this.value.key === node.key) || this.value == node;\n                index = areNodesEqual ? 0 : -1;\n            }\n            else {\n                for (let i = 0; i < this.value.length; i++) {\n                    let selectedNode = this.value[i];\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return index;\n    }\n    onSelect(node) {\n        this.onNodeSelect.emit(node);\n        if (this.selectionMode === 'single') {\n            this.hide();\n        }\n    }\n    onUnselect(node) {\n        this.onNodeUnselect.emit(node);\n    }\n    onOverlayEnter() {\n        ZIndexUtils.set('overlay', this.overlayEl, this.config.zIndex.overlay);\n        this.appendContainer();\n        this.alignOverlay();\n        this.bindOutsideClickListener();\n        this.bindScrollListener();\n        this.bindResizeListener();\n        this.onShow.emit();\n    }\n    onOverlayLeave() {\n        this.unbindOutsideClickListener();\n        this.unbindScrollListener();\n        this.unbindResizeListener();\n        ZIndexUtils.clear(this.overlayEl);\n        this.overlayEl = null;\n        this.onHide.emit();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    writeValue(value) {\n        this.value = value;\n        this.updateTreeState();\n        this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlayEl);\n            else\n                document.getElementById(this.appendTo).appendChild(this.overlayEl);\n        }\n    }\n    restoreAppend() {\n        if (this.overlayEl && this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.removeChild(this.overlayEl);\n            else\n                document.getElementById(this.appendTo).removeChild(this.overlayEl);\n        }\n    }\n    alignOverlay() {\n        if (this.appendTo) {\n            DomHandler.absolutePosition(this.overlayEl, this.containerEl.nativeElement);\n            this.overlayEl.style.minWidth = DomHandler.getOuterWidth(this.containerEl.nativeElement) + 'px';\n        }\n        else {\n            DomHandler.relativePosition(this.overlayEl, this.containerEl.nativeElement);\n        }\n    }\n    bindOutsideClickListener() {\n        if (!this.outsideClickListener) {\n            this.outsideClickListener = (event) => {\n                if (this.overlayVisible && this.overlayEl && !this.containerEl.nativeElement.contains(event.target) && !this.overlayEl.contains(event.target)) {\n                    this.hide();\n                }\n            };\n            document.addEventListener('click', this.outsideClickListener);\n        }\n    }\n    unbindOutsideClickListener() {\n        if (this.outsideClickListener) {\n            document.removeEventListener('click', this.outsideClickListener);\n            this.outsideClickListener = null;\n        }\n    }\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerEl.nativeElement, () => {\n                if (this.overlayVisible) {\n                    this.hide();\n                }\n            });\n        }\n        this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n    bindResizeListener() {\n        if (!this.resizeListener) {\n            this.resizeListener = () => {\n                if (this.overlayVisible) {\n                    this.hide();\n                }\n            };\n            window.addEventListener('resize', this.resizeListener);\n        }\n    }\n    unbindResizeListener() {\n        if (this.resizeListener) {\n            window.removeEventListener('resize', this.resizeListener);\n            this.resizeListener = null;\n        }\n    }\n    ngOnDestroy() {\n        this.restoreAppend();\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n        if (this.overlayEl) {\n            ZIndexUtils.clear(this.overlayEl);\n            this.overlayEl = null;\n        }\n    }\n    containerClass() {\n        return {\n            'p-treeselect p-component p-inputwrapper': true,\n            'p-treeselect-chip': this.display === 'chip',\n            'p-disabled': this.disabled,\n            'p-focus': this.focused\n        };\n    }\n    labelClass() {\n        return {\n            'p-treeselect-label': true,\n            'p-placeholder': this.label === this.placeholder,\n            'p-treeselect-label-empty': !this.placeholder && this.emptyValue\n        };\n    }\n    get emptyMessageText() {\n        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    get emptyValue() {\n        return !this.value || Object.keys(this.value).length === 0;\n    }\n    get emptyOptions() {\n        return !this.options || this.options.length === 0;\n    }\n    get label() {\n        let value = this.value || [];\n        return value.length ? value.map(node => node.label).join(', ') : (this.selectionMode === \"single\" && this.value) ? value.label : this.placeholder;\n    }\n}\nTreeSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: TreeSelect, deps: [{ token: i1.PrimeNGConfig }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.OverlayService }], target: i0.ɵɵFactoryTarget.Component });\nTreeSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.6\", type: TreeSelect, selector: \"p-treeSelect\", inputs: { type: \"type\", inputId: \"inputId\", scrollHeight: \"scrollHeight\", disabled: \"disabled\", metaKeySelection: \"metaKeySelection\", display: \"display\", selectionMode: \"selectionMode\", tabindex: \"tabindex\", ariaLabelledBy: \"ariaLabelledBy\", placeholder: \"placeholder\", panelClass: \"panelClass\", emptyMessage: \"emptyMessage\", appendTo: \"appendTo\", propagateSelectionDown: \"propagateSelectionDown\", propagateSelectionUp: \"propagateSelectionUp\", options: \"options\", showTransitionOptions: \"showTransitionOptions\", hideTransitionOptions: \"hideTransitionOptions\" }, outputs: { onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onShow: \"onShow\", onHide: \"onHide\", onNodeUnselect: \"onNodeUnselect\", onNodeSelect: \"onNodeSelect\" }, host: { properties: { \"class.p-inputwrapper-filled\": \"!emptyValue\", \"class.p-inputwrapper-focus\": \"focused || overlayVisible\" }, classAttribute: \"p-element p-inputwrapper\" }, providers: [TREESELECT_VALUE_ACCESSOR], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerEl\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"focusInput\", first: true, predicate: [\"focusInput\"], descendants: true }], ngImport: i0, template: `\n    <div #container [ngClass]=\"containerClass()\" (click)=\"onClick($event)\">\n        <div class=\"p-hidden-accessible\">\n            <input #focusInput type=\"text\" role=\"listbox\" [attr.id]=\"inputId\" readonly [disabled]=\"disabled\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" (keydown)=\"onKeyDown($event)\" [attr.tabindex]=\"tabindex\"\n            aria-haspopup=\"true\" [attr.aria-expanded]=\"overlayVisible\" [attr.aria-labelledby]=\"ariaLabelledBy\"/>\n        </div>\n        <div class=\"p-treeselect-label-container\">\n            <div [ngClass]=\"labelClass()\">\n                <ng-container *ngIf=\"valueTemplate;else defaultValueTemplate\">\n                        <ng-container *ngTemplateOutlet=\"valueTemplate; context: {$implicit: value, placeholder: placeholder}\"></ng-container>\n                </ng-container>\n                <ng-template #defaultValueTemplate>\n                    <ng-container *ngIf=\"display === 'comma';else chipsValueTemplate\">\n                        {{label || 'empty'}}\n                    </ng-container>\n                    <ng-template #chipsValueTemplate>\n                        <div *ngFor=\"let node of value\" class=\"p-treeselect-token\">\n                            <span class=\"p-treeselect-token-label\">{{node.label}}</span>\n                        </div>\n                        <ng-container *ngIf=\"emptyValue\">{{placeholder || 'empty'}}</ng-container>\n                    </ng-template>\n                </ng-template>\n            </div>\n        </div>\n        <div class=\"p-treeselect-trigger\">\n            <span class=\"p-treeselect-trigger-icon pi pi-chevron-down\"></span>\n        </div>\n\n        <div #overlayRef class=\"p-treeselect-panel p-component\" *ngIf=\"overlayVisible\" (click)=\"onOverlayClick($event)\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationDone($event)\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: value, options: options}\"></ng-container>\n            <div class=\"p-treeselect-items-wrapper\" [ngStyle]=\"{'max-height': scrollHeight}\">\n                <p-tree [value]=\"options\" [propagateSelectionDown]=\"propagateSelectionDown\" [propagateSelectionUp]=\"propagateSelectionUp\" [selectionMode]=\"selectionMode\" (selectionChange)=\"onSelectionChange($event)\" [selection]=\"value\"\n                    [metaKeySelection]=\"metaKeySelection\" (onNodeExpand)=\"nodeExpand($event)\" (onNodeCollapse)=\"nodeCollapse($event)\"\n                    (onNodeSelect)=\"onSelect($event)\" (onNodeUnselect)=\"onUnselect($event)\"></p-tree>\n                <div *ngIf=\"emptyOptions\" class=\"p-treeselect-empty-message\">\n                    <ng-container *ngIf=\"!emptyTemplate; else empty\">\n                        {{emptyMessageText}}\n                    </ng-container>\n                    <ng-container *ngTemplateOutlet=\"emptyTemplate;\"></ng-container>\n                </div>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: value, options: options}\"></ng-container>\n        </div>\n    </div>\n    `, isInline: true, styles: [\".p-treeselect{display:inline-flex;cursor:pointer;position:relative;-webkit-user-select:none;user-select:none}.p-treeselect-trigger{display:flex;align-items:center;justify-content:center;flex-shrink:0}.p-treeselect-label-container{overflow:hidden;flex:1 1 auto;cursor:pointer}.p-treeselect-label{display:block;white-space:nowrap;cursor:pointer;overflow:hidden;text-overflow:ellipsis}.p-treeselect-label-empty{overflow:hidden;visibility:hidden}.p-treeselect-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto}.p-treeselect .p-treeselect-panel{min-width:100%}.p-treeselect-panel{position:absolute;top:0;left:0}.p-treeselect-items-wrapper{overflow:auto}.p-fluid .p-treeselect{display:flex}\\n\"], components: [{ type: i2.Tree, selector: \"p-tree\", inputs: [\"value\", \"selectionMode\", \"selection\", \"style\", \"styleClass\", \"contextMenu\", \"layout\", \"draggableScope\", \"droppableScope\", \"draggableNodes\", \"droppableNodes\", \"metaKeySelection\", \"propagateSelectionUp\", \"propagateSelectionDown\", \"loading\", \"loadingIcon\", \"emptyMessage\", \"ariaLabel\", \"togglerAriaLabel\", \"ariaLabelledBy\", \"validateDrop\", \"filter\", \"filterBy\", \"filterMode\", \"filterPlaceholder\", \"filterLocale\", \"scrollHeight\", \"virtualScroll\", \"virtualNodeHeight\", \"minBufferPx\", \"maxBufferPx\", \"indentation\", \"trackBy\"], outputs: [\"selectionChange\", \"onNodeSelect\", \"onNodeUnselect\", \"onNodeExpand\", \"onNodeCollapse\", \"onNodeContextMenuSelect\", \"onNodeDrop\", \"onFilter\"] }], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({ opacity: 0, transform: 'scaleY(0.8)' }),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: TreeSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-treeSelect', template: `\n    <div #container [ngClass]=\"containerClass()\" (click)=\"onClick($event)\">\n        <div class=\"p-hidden-accessible\">\n            <input #focusInput type=\"text\" role=\"listbox\" [attr.id]=\"inputId\" readonly [disabled]=\"disabled\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" (keydown)=\"onKeyDown($event)\" [attr.tabindex]=\"tabindex\"\n            aria-haspopup=\"true\" [attr.aria-expanded]=\"overlayVisible\" [attr.aria-labelledby]=\"ariaLabelledBy\"/>\n        </div>\n        <div class=\"p-treeselect-label-container\">\n            <div [ngClass]=\"labelClass()\">\n                <ng-container *ngIf=\"valueTemplate;else defaultValueTemplate\">\n                        <ng-container *ngTemplateOutlet=\"valueTemplate; context: {$implicit: value, placeholder: placeholder}\"></ng-container>\n                </ng-container>\n                <ng-template #defaultValueTemplate>\n                    <ng-container *ngIf=\"display === 'comma';else chipsValueTemplate\">\n                        {{label || 'empty'}}\n                    </ng-container>\n                    <ng-template #chipsValueTemplate>\n                        <div *ngFor=\"let node of value\" class=\"p-treeselect-token\">\n                            <span class=\"p-treeselect-token-label\">{{node.label}}</span>\n                        </div>\n                        <ng-container *ngIf=\"emptyValue\">{{placeholder || 'empty'}}</ng-container>\n                    </ng-template>\n                </ng-template>\n            </div>\n        </div>\n        <div class=\"p-treeselect-trigger\">\n            <span class=\"p-treeselect-trigger-icon pi pi-chevron-down\"></span>\n        </div>\n\n        <div #overlayRef class=\"p-treeselect-panel p-component\" *ngIf=\"overlayVisible\" (click)=\"onOverlayClick($event)\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationDone($event)\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: value, options: options}\"></ng-container>\n            <div class=\"p-treeselect-items-wrapper\" [ngStyle]=\"{'max-height': scrollHeight}\">\n                <p-tree [value]=\"options\" [propagateSelectionDown]=\"propagateSelectionDown\" [propagateSelectionUp]=\"propagateSelectionUp\" [selectionMode]=\"selectionMode\" (selectionChange)=\"onSelectionChange($event)\" [selection]=\"value\"\n                    [metaKeySelection]=\"metaKeySelection\" (onNodeExpand)=\"nodeExpand($event)\" (onNodeCollapse)=\"nodeCollapse($event)\"\n                    (onNodeSelect)=\"onSelect($event)\" (onNodeUnselect)=\"onUnselect($event)\"></p-tree>\n                <div *ngIf=\"emptyOptions\" class=\"p-treeselect-empty-message\">\n                    <ng-container *ngIf=\"!emptyTemplate; else empty\">\n                        {{emptyMessageText}}\n                    </ng-container>\n                    <ng-container *ngTemplateOutlet=\"emptyTemplate;\"></ng-container>\n                </div>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: value, options: options}\"></ng-container>\n        </div>\n    </div>\n    `, animations: [\n                        trigger('overlayAnimation', [\n                            transition(':enter', [\n                                style({ opacity: 0, transform: 'scaleY(0.8)' }),\n                                animate('{{showTransitionParams}}')\n                            ]),\n                            transition(':leave', [\n                                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n                            ])\n                        ])\n                    ], host: {\n                        'class': 'p-element p-inputwrapper',\n                        '[class.p-inputwrapper-filled]': '!emptyValue',\n                        '[class.p-inputwrapper-focus]': 'focused || overlayVisible'\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, providers: [TREESELECT_VALUE_ACCESSOR], encapsulation: ViewEncapsulation.None, styles: [\".p-treeselect{display:inline-flex;cursor:pointer;position:relative;-webkit-user-select:none;user-select:none}.p-treeselect-trigger{display:flex;align-items:center;justify-content:center;flex-shrink:0}.p-treeselect-label-container{overflow:hidden;flex:1 1 auto;cursor:pointer}.p-treeselect-label{display:block;white-space:nowrap;cursor:pointer;overflow:hidden;text-overflow:ellipsis}.p-treeselect-label-empty{overflow:hidden;visibility:hidden}.p-treeselect-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto}.p-treeselect .p-treeselect-panel{min-width:100%}.p-treeselect-panel{position:absolute;top:0;left:0}.p-treeselect-items-wrapper{overflow:auto}.p-fluid .p-treeselect{display:flex}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i1.PrimeNGConfig }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.OverlayService }]; }, propDecorators: { type: [{\n                type: Input\n            }], inputId: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input\n            }], display: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }], ariaLabelledBy: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], panelClass: [{\n                type: Input\n            }], emptyMessage: [{\n                type: Input\n            }], appendTo: [{\n                type: Input\n            }], propagateSelectionDown: [{\n                type: Input\n            }], propagateSelectionUp: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], showTransitionOptions: [{\n                type: Input\n            }], hideTransitionOptions: [{\n                type: Input\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], containerEl: [{\n                type: ViewChild,\n                args: ['container']\n            }], focusInput: [{\n                type: ViewChild,\n                args: ['focusInput']\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onShow: [{\n                type: Output\n            }], onHide: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }] } });\nclass TreeSelectModule {\n}\nTreeSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: TreeSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: TreeSelectModule, declarations: [TreeSelect], imports: [CommonModule, RippleModule, SharedModule, TreeModule], exports: [TreeSelect, SharedModule, TreeModule] });\nTreeSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: TreeSelectModule, imports: [[CommonModule, RippleModule, SharedModule, TreeModule], SharedModule, TreeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: TreeSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RippleModule, SharedModule, TreeModule],\n                    exports: [TreeSelect, SharedModule, TreeModule],\n                    declarations: [TreeSelect]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TREESELECT_VALUE_ACCESSOR, TreeSelect, TreeSelectModule };\n"]},"metadata":{},"sourceType":"module"}